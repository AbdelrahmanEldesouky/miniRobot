<?xml version="1.0"?>
<launch>

	<!-- Kinect cloud to laser scan -->
	<node pkg="depthimage_to_laserscan" 		type="depthimage_to_laserscan" name="depthimage_to_laserscan">
  	    <remap from="image"     			to="/camera/depth_registered/image_raw"/>
  	    <remap from="camera_info" 			to="/camera/rgb/camera_info"/>
	    <remap from="scan"        			to="/kinect_scan"/>
	    <param name="range_max" 			type="double" 		value="4"/>
	</node>

	<!-- SLAM -->
	<group ns="rtabmap">
	  <node name="rtabmap" pkg="rtabmap_ros" 	type="rtabmap" 		output="screen" 		args="--delete_db_on_start">

	    <param name="database_path"       		type="string" 		value="$(find Robot_rtabmap)/rtabmap.db"/>
	    <param name="frame_id"			type="string"		value="base_footprint"/>
	    <param name="wait_for_transform"    	type="bool"		value="false"/>

	    <param name="subscribe_depth"		type="bool" 		value="true"/>
	    <param name="subscribe_scan"		type="bool" 		value="true"/>

	    <remap from="odom" 				to="/filtered_odom"/>
	    <param name="odom_tf_linear_variance"  	type="double" 		value="0.001"/>
	    <param name="odom_tf_angular_variance" 	type="double" 		value="0.001"/>

	    <remap from="scan" 				to="/kinect_scan"/>
	    <!-- RTAB-Map Output -->
	    <remap from="grid_map" to="/map"/>

    	    <remap from="rgb/image"       		to="/camera/rgb/image_rect_color"/>
  	    <remap from="depth/image"     		to="/camera/depth_registered/image_raw"/>
  	    <remap from="rgb/camera_info" 		to="/camera/rgb/camera_info"/>
  	
	    <param name="rgb/image_transport"   	type="string" 		value="compressed"/>
	    <param name="depth/image_transport" 	type="string" 		value="compressedDepth"/>
	  
	    <param name="queue_size" 			type="int" 		value="1000"/>

	    <!-- Rate (Hz) at which new nodes are added to map -->
      	    <param name="Rtabmap/DetectionRate" type="string" value="1"/>

	    <!-- Do odometry correction with consecutive laser scans -->
	    <param name="RGBD/NeighborLinkRefining" 	type="string" 		value="true"/>  

	    <!-- Local loop closure detection (using estimated position) with locations in WM -->
	    <param name="RGBD/ProximityBySpace"     	type="string" 		value="true"/>  

	    <!-- Local loop closure detection with locations in STM -->
	    <param name="RGBD/ProximityByTime"      	type="string" 		value="false"/> 

	    <!-- Do also proximity detection by space by merging close scans together. -->
	    <param name="RGBD/ProximityPathMaxNeighbors" type="string" 		value="10"/> 

	    <!-- 0=Visual, 1=ICP, 2=Visual+ICP -->
	    <param name="Reg/Strategy"              	type="string" 		value="0"/>    

	    <!-- 3D visual words correspondence distance -->
	    <param name="Vis/MinInliers"        	type="string" 		value="15"/>   

 	    <!-- Optimize graph from initial node so /map -> /odom transform will be generated -->
	    <param name="RGBD/OptimizeFromGraphEnd" 	type="string" 		value="false"/>

 	    <!-- Reject any loop closure causing large errors (>3x link's covariance) in the map -->
	    <param name="RGBD/OptimizeMaxError"     	type="string" 		value="4"/>	

   	    <!-- 2D SLAM -->	
	    <param name="Reg/Force3DoF"             	type="string" 		value="true"/> 

            <!-- Create 2D occupancy grid from laser scan -->
	    <param name="Grid/Sensor"            	type="string" 		value="false"/> 

	    <!-- increased to 30 to avoid adding too many loop closures on just seen locations -->
	    <param name="Mem/STMSize"               	type="string" 		value="30"/>  

  	    <!-- limit length of proximity detections -->
	    <param name="RGBD/LocalRadius"          	type="string" 		value="5"/>

	    <!-- Set to false to avoid saving data when robot is not moving -->
            <param name="Mem/NotLinkedNodesKept" type="string" value="false"/> 

	    <!-- Loop Closure Detection -->
      	    <!-- 0=SURF 1=SIFT 2=ORB 3=FAST/FREAK 4=FAST/BRIEF 5=GFTT/FREAK 6=GFTT/BRIEF 7=BRISK 8=GFTT/ORB 9=KAZE -->
      	    <param name="Kp/DetectorStrategy" type="string" value="0"/>

     	    <!-- Maximum visual words per image (bag-of-words) -->
            <param name="Kp/MaxFeatures" type="string" value="400"/>

            <!-- Used to extract more or less SURF features -->
            <param name="SURF/HessianThreshold" type="string" value="100"/>   

	  </node>

 	  <!-- Visualisation RTAB-Map -->
	  <node pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" output="screen">
	    <param name="subscribe_depth"		type="bool" 		value="true"/>
	    <param name="subscribe_scan"		type="bool" 		value="true"/>
	    <param name="frame_id"			type="string" 		value="base_footprint"/>
	    <param name="wait_for_transform" 		type="bool" 		value="true"/>

    	    <remap from="rgb/image"       		to="/camera/rgb/image_rect_color"/>
  	    <remap from="depth/image"     		to="/camera/depth_registered/image_raw"/>
  	    <remap from="rgb/camera_info" 		to="/camera/rgb/camera_info"/>
	    <remap from="scan"            		to="/filtered_odom"/>
	    <remap from="odom"            		to="/kinect_scan"/>

	    <param name="queue_size" 			type="int" 		value="1000"/>

	    <param name="rgb/image_transport"   	type="string" 		value="compressed"/>
	    <param name="depth/image_transport" 	type="string" 		value="compressedDepth"/>
	  </node>
	</group>
  
	<!-- Visualisation RVIZ -->
	<node pkg="rviz" type="rviz" name="rviz" args="-d $(find rtabmap_ros)/launch/config/demo_robot_mapping.rviz" output="screen"/>
	<node pkg="nodelet" 				type="nodelet" 		name="points_xyzrgb" args="standalone rtabmap_ros/point_cloud_xyzrgb">
    	    <remap from="rgb/image"       		to="/camera/rgb/image_rect_color"/>
  	    <remap from="depth/image"     		to="/camera/depth_registered/image_raw"/>
  	    <remap from="rgb/camera_info" 		to="/camera/rgb/camera_info"/>
	    <remap from="cloud"           		to="voxel_cloud" />

	    <param name="rgb/image_transport"   	type="string" 		value="compressed"/>
	    <param name="depth/image_transport" 	type="string" 		value="compressedDepth"/>

	    <param name="queue_size" 			type="int" 		value="1000"/>
	    <param name="voxel_size" 			type="double" 		value="0.01"/>
	</node>

	<node pkg="tf" type="static_transform_publisher" name="base_to_camera" args="0.01 0 0 0 0 0 1 base_footprint camera_link 100" />

</launch>
